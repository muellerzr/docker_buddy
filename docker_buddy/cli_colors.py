# AUTOGENERATED! DO NOT EDIT! File to edit: 00_cli_colors.ipynb (unless otherwise specified).

__all__ = ['console', 'create_docker_search_table', 'docker_search', 'create_docker_ls_table', 'docker_container_ls']

# Cell
from rich import print as rprint
from rich.console import Console
from fastcore.script import call_parse, Param, store_true

# Cell
console = Console()

# Cell
def _run(cmd):
    out = subprocess.run(cmd, capture_output=True, text=True)
    return out.stdout

# Cell
import subprocess
import json

# Cell
from rich.table import Table

# Cell
def _format_name(name):
    "Formats the container name to be colorized and colorblind-friendly"
    if '/' in name:
        full_name = name.split('/')
    if len(full_name) == 2:
        org = f'[#FFC20A]{full_name[0]}'
        name = f'[#0C7BDC]{full_name[1]}'
        name = f'{org}[white]/{name}'
    return name

# Cell
def create_docker_search_table(data, **args):
    "Returns a `Table` from a docker search query"
    def _get_data(item):
        "Parses json and returns a list"
        return [
            item['Name'],
            item['Description'],
            item['StarCount'],
            item['IsOfficial'],
            item['IsAutomated']
        ]
    table = Table(show_header=True, header_style="bold #0C7BDC", show_lines=True, **args) # Change to blue
    table.add_column("Container Name", justify="left")
    table.add_column("Description", justify="left")
    table.add_column("Stars", justify="left")
    table.add_column("Official", justify="left")
    table.add_column("Automated", justify="left")
    split_data = data.split('\n')
    parsed_data = [json.loads(a[1:-1]) for a in split_data if len(a) > 0]
    for point in parsed_data:
        point['Name'] = _format_name(point['Name'])
        if point['IsAutomated'] == 'true':
            point['IsAutomated'] = "[green]:heavy_check_mark:"
        else:
            point['IsAutomated'] = ''
        if point['IsOfficial'] == 'true':
            point['IsOfficial'] = "[green]:heavy_check_mark:"
        else:
            point['IsOfficial'] = ''
        table.add_row(*_get_data(point))
    return table

# Cell
@call_parse
def docker_search(
    TERM:Param("The name of a Docker image or namespace to search for", str),
    FILTER:Param("Filter output based on conditions provided", str)='',
    LIMIT:Param("Max number of search results (default 25)", int, default=25)=25,
    NO_TRUNC:Param("Don't truncate output", store_true)=False
):
    "Search the Docker Hub for images"
    cmd = ['docker','search']
    if len(FILTER) > 0:
        cmd += ['--filter', FILTER]
    if NO_TRUNC != False:
        cmd += ['--no-trunc']
    cmd += ['--limit', str(LIMIT)]
    cmd += [TERM, '--format', '"{{json . }}"']
    res = _run(cmd)
    table = create_docker_search_table(res)
    console.print(table)

# Cell
def _format_ports(port_string:str):
    "Color codes port forwarding"
    _incoming = '#FFC20A'
    _outgoing = '#0C7BDC'
    ports = port_string.split()
    first_port = ports[0].split(':')
    gateways = first_port[1].strip(',')
    gateways = gateways.split('->')
    gateways[0] = f'[{_incoming}]{gateways[0]}[/{_incoming}]'
    gateways[1] = f'[{_outgoing}]{gateways[1]}[/{_outgoing}]'
    first_port = first_port[0]+':'+'->'.join(gateways)

    second_port = ports[1].split(':::')[1]
    gateways = second_port.split('->')
    gateways[0] = f'[{_incoming}]{gateways[0]}[/{_incoming}]'
    gateways[1] = f'[{_outgoing}]{gateways[1]}[/{_outgoing}]'
    second_port = '::'+':'+'->'.join(gateways)
    return f'{first_port}, {second_port}'

# Cell
def create_docker_ls_table(data, **args):
    "Returns a `Table` from a docker search query"
    def _get_data(item):
        "Parses json and returns a list"
        return [
            item['Names'],
            item['Image'],
            item['Status'],
            item['Ports']
        ]
    table = Table(show_header=True, header_style="bold #0C7BDC", show_lines=True, **args) # Change to blue
    table.add_column("Container Nickname", justify="left")
    table.add_column("Image", justify="left")
    table.add_column("Current Status", justify="left")
    table.add_column("Ports", justify="left")
    split_data = data.split('\n')
    parsed_data = [json.loads(a[1:-1]) for a in split_data if len(a) > 0]
    for point in parsed_data:
        point['Image'] = _format_name(point['Image'])
        if point['State'] == 'running':
            point['Status'] = f"[green]{point['Status']}[/green]"
        else:
            point['Status'] = f"[red]{point['Status']}[/red]"
        point['Ports'] = _format_ports(point['Ports'])
        del point['State']
        table.add_row(*_get_data(point))
    return table

# Cell
@call_parse
def docker_container_ls():
    "List containers"
    cmd = ['docker','ps','--format','"{{json . }}"','--no-trunc']
    res = _run(cmd)
    table = create_docker_ls_table(res)
    console.print(table)